---
- name: Deploy Microservices to Remote Server
  hosts: webservers
  become: yes
  vars:
    app_name: microservice-admin-app
    app_dir: "/opt/{{ app_name }}"
    docker_compose_file: docker-compose.deploy.yml
    ghcr_registry: ghcr.io

  tasks:
  - name: Update system packages
    apt:
      update_cache: yes
      cache_valid_time: 3600
    when: ansible_os_family == "Debian"

  - name: Install required packages
    apt:
      name:
      - docker.io
      - docker-compose-plugin
      - git
      - curl
      state: present
    when: ansible_os_family == "Debian"

  - name: Start and enable Docker service
    systemd:
      name: docker
      state: started
      enabled: yes

  - name: Add user to docker group
    user:
      name: "{{ ansible_user }}"
      groups: docker
      append: yes

  - name: Create application directory
    file:
      path: "{{ app_dir }}"
      state: directory
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0755'

  - name: Clone or update repository
    git:
      repo: "https://github.com/{{ ghcr_owner }}/Microservice-admin-apps.git"
      dest: "{{ app_dir }}"
      version: main
      force: yes
    become_user: "{{ ansible_user }}"

  - name: Copy database init file
    copy:
      src: "{{ app_dir }}/database/init.sql"
      dest: "{{ app_dir }}/init.sql"
      remote_src: yes
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"

  - name: Login to GitHub Container Registry
    shell: |
      echo "${{ lookup('env', 'GITHUB_TOKEN') }}" | docker login ghcr.io -u {{ ghcr_owner }} --password-stdin
    become_user: "{{ ansible_user }}"
    when: lookup('env', 'GITHUB_TOKEN') != ""

  - name: Create docker-compose.deploy.yml with updated versions
    template:
      src: docker-compose.deploy.yml.j2
      dest: "{{ app_dir }}/docker-compose.deploy.yml"
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: '0644'

  - name: Stop existing containers
    shell: |
      cd {{ app_dir }}
      docker-compose -f {{ docker_compose_file }} down || true
    become_user: "{{ ansible_user }}"
    ignore_errors: yes

  - name: Pull latest images
    shell: |
      cd {{ app_dir }}
      docker-compose -f {{ docker_compose_file }} pull
    become_user: "{{ ansible_user }}"

  - name: Start services with docker-compose
    shell: |
      cd {{ app_dir }}
      docker-compose -f {{ docker_compose_file }} up -d
    become_user: "{{ ansible_user }}"

  - name: Wait for services to be ready
    wait_for:
      port: "{{ item }}"
      host: localhost
      delay: 10
      timeout: 300
    loop:
    - 8080 # Frontend
    - 5000 # Backend
    - 3306 # Database

  - name: Verify deployment
    uri:
      url: "http://localhost:8080"
      method: GET
      status_code: 200
    retries: 5
    delay: 10

  - name: Clean up old Docker images
    shell: |
      docker image prune -f
      docker container prune -f
    become_user: "{{ ansible_user }}"

  - name: Display deployment information
    debug:
      msg:
      - "Deployment completed successfully!"
      - "Application Version: {{ image_version }}"
      - "Frontend URL: http://{{ ansible_default_ipv4.address }}:8080"
      - "Backend API: http://{{ ansible_default_ipv4.address }}:5000"
      - "Application Directory: {{ app_dir }}"
