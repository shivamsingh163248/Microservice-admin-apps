name: Build, Push, and Deploy (Direct SSH)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_VERSION: v1.0.${{ github.run_number }}
  GHCR: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write

    outputs:
      image_version: ${{ env.IMAGE_VERSION }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build & Push Backend
      run: |
        docker build -t $GHCR/$OWNER/flask_backend:${IMAGE_VERSION} ./backend
        docker build -t $GHCR/$OWNER/flask_backend:latest ./backend
        docker push $GHCR/$OWNER/flask_backend:${IMAGE_VERSION}
        docker push $GHCR/$OWNER/flask_backend:latest

    - name: Build & Push Frontend
      run: |
        docker build -t $GHCR/$OWNER/nginx_frontend:${IMAGE_VERSION} ./frontend
        docker build -t $GHCR/$OWNER/nginx_frontend:latest ./frontend
        docker push $GHCR/$OWNER/nginx_frontend:${IMAGE_VERSION}
        docker push $GHCR/$OWNER/nginx_frontend:latest

    - name: Push MySQL (Optional)
      run: |
        docker pull mysql:5.7
        docker tag mysql:5.7 $GHCR/$OWNER/mysql_db:${IMAGE_VERSION}
        docker tag mysql:5.7 $GHCR/$OWNER/mysql_db:latest
        docker push $GHCR/$OWNER/mysql_db:${IMAGE_VERSION}
        docker push $GHCR/$OWNER/mysql_db:latest

    - name: Update docker-compose.github.yml with New Versions
      run: |
        # Update the GitHub packages docker-compose file with new version
        sed -i "s|ghcr.io/$OWNER/flask_backend:.*|ghcr.io/$OWNER/flask_backend:${IMAGE_VERSION}|g" ./docker-compose.github.yml
        sed -i "s|ghcr.io/$OWNER/nginx_frontend:.*|ghcr.io/$OWNER/nginx_frontend:${IMAGE_VERSION}|g" ./docker-compose.github.yml
        sed -i "s|ghcr.io/$OWNER/mysql_db:.*|ghcr.io/$OWNER/mysql_db:${IMAGE_VERSION}|g" ./docker-compose.github.yml
        
        # Also create a versioned docker-compose file for deployment
        cp docker-compose.github.yml docker-compose.deploy.yml

    - name: Commit Updated Docker Compose Files
      uses: EndBug/add-and-commit@v9
      with:
        message: "🚀 Auto-update docker-compose versions to ${{ env.IMAGE_VERSION }}"
        add: |
          docker-compose.github.yml
          docker-compose.deploy.yml

    - name: Show Build Summary
      run: |
        echo "### 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${IMAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "**Images Built:**" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: $GHCR/$OWNER/flask_backend:${IMAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: $GHCR/$OWNER/nginx_frontend:${IMAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "- Database: $GHCR/$OWNER/mysql_db:${IMAGE_VERSION}" >> $GITHUB_STEP_SUMMARY

  deploy-direct-ssh:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Deploy to Server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Set variables
          IMAGE_VERSION="${{ needs.build-and-push.outputs.image_version }}"
          GHCR_OWNER="${{ github.repository_owner }}"
          APP_DIR="/opt/microservice-admin-app"
          
          echo "🚀 Starting deployment of version: $IMAGE_VERSION"
          
          # Create app directory if it doesn't exist
          sudo mkdir -p $APP_DIR
          sudo chown $USER:$USER $APP_DIR
          
          # Navigate to app directory
          cd $APP_DIR
          
          # Clone/update repository
          if [ -d ".git" ]; then
            echo "📥 Updating repository..."
            git pull origin main
          else
            echo "📥 Cloning repository..."
            git clone https://github.com/$GHCR_OWNER/Microservice-admin-apps.git .
          fi
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GHCR_OWNER --password-stdin
          
          # Create updated docker-compose file
          cat > docker-compose.deploy.yml << EOF
          version: '3.8'
          
          services:
            database:
              image: ghcr.io/$GHCR_OWNER/mysql_db:$IMAGE_VERSION
              container_name: mysql_db
              restart: always
              environment:
                MYSQL_ROOT_PASSWORD: rootpass
                MYSQL_DATABASE: adminapp
                MYSQL_USER: adminuser
                MYSQL_PASSWORD: adminpass
              volumes:
                - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
                - mysql_data:/var/lib/mysql
              ports:
                - "3306:3306"
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                timeout: 20s
                retries: 10
              networks:
                - microservice-network
          
            backend:
              image: ghcr.io/$GHCR_OWNER/flask_backend:$IMAGE_VERSION
              container_name: flask_backend
              restart: always
              environment:
                DB_HOST: database
                DB_USER: adminuser
                DB_PASS: adminpass
                DB_NAME: adminapp
              ports:
                - "5000:5000"
              depends_on:
                database:
                  condition: service_healthy
              networks:
                - microservice-network
          
            frontend:
              image: ghcr.io/$GHCR_OWNER/nginx_frontend:$IMAGE_VERSION
              container_name: nginx_frontend
              restart: always
              ports:
                - "8080:80"
              depends_on:
                - backend
              networks:
                - microservice-network
          
          volumes:
            mysql_data:
              driver: local
          
          networks:
            microservice-network:
              driver: bridge
          EOF
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          docker-compose -f docker-compose.deploy.yml down || true
          
          # Pull latest images
          echo "📦 Pulling latest images..."
          docker-compose -f docker-compose.deploy.yml pull
          
          # Start services
          echo "🚀 Starting services..."
          docker-compose -f docker-compose.deploy.yml up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
          # Health check
          echo "🔍 Performing health checks..."
          curl -f http://localhost:8080 || echo "❌ Frontend health check failed"
          curl -f http://localhost:5000/health || echo "❌ Backend health check failed"
          
          # Clean up old images
          echo "🧹 Cleaning up old images..."
          docker image prune -f
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Frontend: http://$(curl -s ifconfig.me):8080"
          echo "🔗 Backend: http://$(curl -s ifconfig.me):5000"

    - name: Deployment Summary
      run: |
        echo "### 🎯 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** Completed" >> $GITHUB_STEP_SUMMARY
        echo "**Version Deployed:** ${{ needs.build-and-push.outputs.image_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Method:** Direct SSH" >> $GITHUB_STEP_SUMMARY
        echo "**No Ansible Installation:** ✅" >> $GITHUB_STEP_SUMMARY
